var tipuesearch = {"pages": [{'title': '簡介', 'text': '改版: \n 2020.05.11 \n Pyslvs 英文手冊:\xa0 https://pyslvs-ui.readthedocs.io/en/stable/ \n \n 舊版資料 (2019.07 之前): \n Pyslvs  是一套利用 Python 3 與 PyQt5 建立的平面機構模擬與合成系統.\xa0 機構模擬與合成的主要核心包括\xa0 Python-Solvespace \xa0幾何約束求解程式庫、 tinycadlib  三角幾何函式程式庫、 ADesign  演算程式庫、 bgfs  幾何約束求解程式庫、 topologic \xa0類型合成程式庫、 number  數目合成程式庫等. \n 其中,  ADesign  演算程式庫包含 Real-coded Genetic Algorithm ( RGA )、Differential Evolution ( DE ) 與 Firefly Algorithm ( Firefly ) 等三種, 用於平面機構尺寸合成演算. \n 源起 \n Pyslvs  的開發源自 2008 年, 從最基本的實數基因演算法在平面機構的應用研究起步, 期間歷經下列研究者的貢獻: \n \n 李孟恭, 2015,  Django 網際框架在平面四連桿尺寸合成系統上的應用 \n 李玠廷, 2013,  網際程式框架在平面連桿機構尺寸合成系統上的應用 \n 陳威任, 2013, 符號式平面滑塊機構應用研究 \n 謝政良, 2012,  網際雙自由度凸輪機構尺寸合成系統 \n 黃竣鉉, 2012,  網際符號輔助軸接連桿機構之基因演算法尺寸合成系統 \n 謝智翔, 2012,  網際史都華平台機構逆運動學分析與模擬 \n 許哲菘, 2010,  網際六軸機械臂系統的逆運動學分析與模擬 \n 葉岱錦, 2009,  基因演算法在網際機構合成系統上的應用 \n \n 過程中, 於 2015 年由 李孟恭 整合上述論文所開發的三種演算法, 完成  Cython  格式的  RGA 、 DE  與  Firefly  演算法程式庫後. 並自 2016 年起由 張元 將上述尺寸合成演算法, 搭配利用\xa0  SWIG  技術, 將原本只能用於 Python 2 的  Python-Solvespace  倉儲, 改寫為能結合 PyQt5 圖形介面使用的  Python-Solvespace  程式庫作為另一項開端. 再搭配平面機構中的數目合成與類型合成等程式庫後, 成為目前的  Pyslvs  平面機構模擬與合成套件. \n Pyslvs 開發紀要 \n 2015 年 4 月 - 由 李孟恭 以  Cython  技術, 完成三個 尺寸合成演算法 程式庫. \n 2016 年 7 月 - 由 張元 完成 Python 3 格式的  Python-Solvespace  程式庫. \n 2016 年 12 月- 由 張元 結合 PyQt5 與演算程式庫, 完成第一代  Pyslvs  套件. \n 2017 年 11 月 -  http://pyslvs.com \xa0上線. \n 2018 年 1 月 - 推出  Pyslvs  18.01\xa0 版, 自此改為以年月序作為版次. \n 2018 年 7 月 -\xa0 http://pyslvs.com/content/ \xa0使用手冊上線. \n \n', 'tags': '', 'url': '簡介.html'}, {'title': '機構與機器', 'text': '機構 (Mechanism) \n 機構是由剛體 (Rigid) 或撓性 (Flexible) 體機械元件所組成, 這些元件透過接頭 (Joint) 連接, 並以特定的運動相互移動. \n 機器 (Machine) \n 機器是由機構或機構的集合所組成, 能將力從動力源傳遞到預計要施加之元件上. \n 換言之, 機器是由剛性元件或撓性元件所組合而成,\xa0能將力從動力源傳遞到預計要施加之元件上. \n 機器具有兩個功能: 傳遞確定的相對運動和傳遞力.\xa0 這些功能需要足夠強度與剛性來傳遞力. \n 若機構中所有的機件皆為連桿, 且所有的接頭皆為旋轉對, 則這個機構特稱為連 (Linkage). \n 參考資料: \n Comparison of Methodologies for Conceptual Design of Mechanisms.pdf \n Design and Optimization of Slider and Crank Mechanism with Multibody Systems.pdf \n Dynamic Analysis of Flexible Mechanisms by Multibody Dynamics.pdf \n', 'tags': '', 'url': '機構與機器.html'}, {'title': 'Pyslvs 介面', 'text': '(以  pyslvs-18.8.0.mscv1900-amd64.exe \xa0 開啟) \n \n Pyslvs 主畫面的上方為功能表列 (Menu bar), 右側為畫布 (Canvas), 左方則有各式功能的分頁欄 (Tab widgets). \n 功能表列涵蓋大部分的功能, 其中部分有關各項目的細部操作, 則必須在對應的分頁欄中選取或設定.\xa0 \n Mechanism 分頁 \n Pyslvs 左側中的 Mechanism 子頁面, 主要用於輸入機構關鍵點與運動連桿, 使用時以滑鼠點選 Mechanism 頁面後, 可在右方工作區, 以滑鼠輸入機構關鍵點與運動連桿. \n Inputs\xa0分頁 \n Pyslvs 的 Inputs 子頁面用於宣告機構的主動軸, 並進行運動模擬. \n Synthesis\xa0分頁 \n Pyslvs 的 Synthesis 子頁面用於進行平面機構的結構合成與尺寸合成. \n 功能表列 (Menu bar) \n 功能表列中根據不同的功能分類如下: \n 檔案 (File) \n 建立新的工作簿、開啟既有的工作簿、參考範例, 以及不同檔案格式的匯入與匯出功能. \n 編輯 (Edit) \n 復原與重做功能.\xa0 \n 選項 (Options) \n 檢視方式調整以及工作簿相關資訊. \n 說明 (Help) \n 與 Pyslvs 相關網站與套件資訊. \n 快捷鍵 \n F1 - 有關 Pyslvs \n Shift + F1 - Toggle 全螢幕 \n', 'tags': '', 'url': 'Pyslvs 介面.html'}, {'title': 'Mechanism', 'text': '\n Points \n The points in Mechanism tag mean the joint. There are two types of the joint.\xa0One is the\xa0moveable joint, the other is grouded that we usually call it "frame". Moreover, the joints have the different usage. \n \n pin joint: It uses to make the rotate motion. \n slider block: It can generate the translate motion along the parallel surface. \n pin in slot:\xa0It can have the restricted motion with the slot. \n \n \n Links \n The links can be generated by the several connected points. \n \n binary link: It consist of two points. \n ternary link: It consist of three points. \n quaternary link: It consist of four points. \n \n', 'tags': '', 'url': 'Mechanism.html'}, {'title': 'Inputs', 'text': '', 'tags': '', 'url': 'Inputs.html'}, {'title': 'Synthesis', 'text': '\n', 'tags': '', 'url': 'Synthesis.html'}, {'title': '操作', 'text': 'Pyslvs 開啟 Crank-Rocker 機構畫面, under Mechanism 頁面 (以  pyslvs-18.8.0.mscv1900-amd64.exe \xa0 開啟) : \n \n Crank-Rocker under Inputs 頁面 (以  pyslvs-18.8.0.mscv1900-amd64.exe \xa0 開啟) : \n \n Crank-Rocker 通過特定點尺寸合成畫面1 (以  pyslvs-18.8.0.mscv1900-amd64.exe \xa0 開啟) : \n \n 完成 1000 代 DE 演算法之後的結果畫面 (以  pyslvs-18.8.0.mscv1900-amd64.exe \xa0 開啟) : \n \n', 'tags': '', 'url': '操作.html'}, {'title': '模擬操作', 'text': 'Pyslvs 的模擬操作主要牽涉 Mechanism 與 Inputs 分頁, Mechanism 分頁用於定義機構各節點與連桿, 而 Inputs 分頁則可用來定義主動旋轉軸, 並利用自動或手動模式進行合理平面機構的運動模擬. \n', 'tags': '', 'url': '模擬操作.html'}, {'title': '曲柄滑塊', 'text': '以下說明以\xa0 pyslvs-18.8.0.mscv1900-amd64.exe \xa0 為主. \n File -> New Workbook \n 選擇左側 Mechanism 子頁面. \n 建立固定點與移動點 \n 利用滑鼠在右側畫布區, 按住滑鼠右鍵輸入兩個固定點與一個可運動點. \n 建立連桿 \n 將其中一個固定點轉為滑塊, 即將 point2 之類型 (type) 由 pin 轉為 pin in slot, 採內建水平滑動面, 或更改滑動面的對應角度. \n 在 Mechanism 完成機構定義後, 轉到 Inputs 子頁面, 定義 Driver point 後進行曲柄滑塊的運動模擬. \n', 'tags': '', 'url': '曲柄滑塊.html'}, {'title': '四連桿', 'text': '在 Mechanism 子頁面定義兩個固定點與兩個移動點後, 建立三根可運動連桿. \n 接著進入 Inputs 頁面, 定義 driver points 後進行基本運動模擬. \n', 'tags': '', 'url': '四連桿.html'}, {'title': '尺寸合成操作', 'text': 'Pyslvs 的尺寸合成功能, 主要依賴\xa0 tinycadlib \xa0三角幾何函式程式庫與\xa0 ADesign \xa0演算程式庫, 其中各平面機構範例進行尺寸合成的第一步必須先以三角幾何函式程式庫進行配置後, 再輸入特定機構節點所要通過的運行點座標, 最後再選擇  ADesign \xa0演算程式庫中的 Real-coded Genetic Algorithm ( RGA )、Differential Evolution ( DE ) 或 Firefly Algorithm ( Firefly ) 演算法進行尺寸合成運算. \n', 'tags': '', 'url': '尺寸合成操作.html'}, {'title': '構造合成操作', 'text': 'Pyslvs 的構造合成包括平面機構的數目合成與類型合成等兩部分. \n 在數目合成階段, 使用者可以選擇連桿個數 (Link number)、接頭個數 (Joint number), 以及機構的自由度. \n', 'tags': '', 'url': '構造合成操作.html'}, {'title': '由現有設計進行尺寸合成', 'text': '\n', 'tags': '', 'url': '由現有設計進行尺寸合成.html'}, {'title': '下載', 'text': '請至\xa0 https://github.com/KmolYuan/Pyslvs-UI/releases \xa0下載最新版本 \n 或從 pyslvs At mde Gdrive 中下載: \n pyslvs-20.04.0.mscv1900-amd64.zip \n \n 舊版本: \n 利用 pyslvs At mde 登錄 Gdrive 提供各版次下載. \n Windows 64 位元操作系統: \n pyslvs-18.7.0.mscv1900-amd64.exe  (53446 KB) \n pyslvs-18.8.0.mscv1900-amd64.exe  (53458 KB) \n pyslvs-18.9.0.mscv1900-amd64.exe  (68337 KB) \n pyslvs-18.11.0.mscv1900-amd64.exe  (70875 KB) \n', 'tags': '', 'url': '下載.html'}, {'title': '範例', 'text': '展示利用 Pyslvs 解題 \n 參考資料: \n 1977 -\xa0 THE KINEMATICS AND VIBRATION OF PLANAR LINKAGE MECHANISMS \n MeKin2d \n MACHINES AND MECHANISMS APPLIED KINEMATIC ANALYSIS Fourth Edition by David H. Myszka \n Introduction to Mechanism Design: with Computer Applications by By Eric Constans and Karl B. Dyer \n THEORY OF MACHINES AND MECHANISMS Fourth Edition by John Uicker, Gordon Pennock and\xa0 Joseph Shigley \n \n \n', 'tags': '', 'url': '範例.html'}, {'title': '模擬範例', 'text': '\n 以下畫面以\xa0 pyslvs-18.8.0.mscv1900-amd64.exe \xa0 製作. \n \n 以下畫面以\xa0 pyslvs-18.8.0.mscv1900-amd64.exe \xa0 製作. \n \n sixbar_r_slider.pyslvs  (只適用於\xa0 pyslvs-18.8.0.mscv1900-amd64.exe \xa0版本 ) \n \n 建立六連桿機構模型 \n 以\xa0 pyslvs-18.8.0.mscv1900-amd64.exe \xa0 製作 ) \n \n 八連桿機構 \n eightbar1.pyslvs \xa0(只適用於\xa0 pyslvs-18.8.0.mscv1900-amd64.exe \xa0版本 ) \n \n eightbar2.pyslvs \xa0(只適用於\xa0 pyslvs-18.8.0.mscv1900-amd64.exe \xa0版本 ) \n \n eightbar3.pyslvs \xa0(只適用於\xa0 pyslvs-18.8.0.mscv1900-amd64.exe \xa0版本 ) \n \n 十連桿機構 \n tenbar_linkage.pyslvs \xa0(只適用於\xa0 pyslvs-18.8.0.mscv1900-amd64.exe \xa0版本 ) \n \n', 'tags': '', 'url': '模擬範例.html'}, {'title': 'Watt six-bar linkage', 'text': 'The Watt six-bar linkage contains two loops that both consist of four-bar loop. In the example, if it has two ternary links, those should be connected. \n Watt I  (Download) \n \n Watt II  (Download) \n \n Version:  Pyslvs v20.08.0\xa0', 'tags': '', 'url': 'Watt six-bar linkage.html'}, {'title': 'Stephenson six-bar linkage', 'text': 'The Stephenson six-bar linkage contains two loops. One\xa0is five-bar loop and the other is four-bar loop. In the example, if it has two ternary links, those should be separated by a binary link. \n \n Stephenson I  (Download) \n \n Stephenson II  (Download) \n \n Stephenson III  (Download) \n \n Version:  Pyslvs v20.08.0', 'tags': '', 'url': 'Stephenson six-bar linkage.html'}, {'title': '尺寸合成範例', 'text': '', 'tags': '', 'url': '尺寸合成範例.html'}, {'title': '結構合成範例', 'text': '', 'tags': '', 'url': '結構合成範例.html'}, {'title': '產品設計範例', 'text': '健步機 \n 連桿式健步機設計.pdf \n sixbar_foot_exercise_machine.pyslvs \xa0(只適用於\xa0 pyslvs-18.8.0.mscv1900-amd64.exe \xa0版本 ) \n \n 汽車雨刷 \n windshield_design1.pyslvs \xa0(只適用於\xa0 pyslvs-18.8.0.mscv1900-amd64.exe \xa0版本 ) \n \n 汽車引擎蓋 \n automobile_hood1.pyslvs \xa0(只適用於\xa0 pyslvs-18.8.0.mscv1900-amd64.exe \xa0版本 ) \n \n 平開窗戶開合機構 \n house_window.pyslvs \xa0(只適用於\xa0 pyslvs-18.8.0.mscv1900-amd64.exe \xa0版本 ) \n \n \n', 'tags': '', 'url': '產品設計範例.html'}, {'title': 'Python 教學', 'text': '本章節將列出基本的 Python3 教學，供學員參考。 \n', 'tags': '', 'url': 'Python 教學.html'}, {'title': '控制流程', 'text': '請學員從下列圖片中的控制流程方法對應 Python 中的語法。 \n # Condition statement\nif condition_1:\n    # Do for condition 1.\nelif condition_2:\n    # Do for condition 2.\nelse:\n    # Do for other case. \n \n # Loops\nfor i in range(10):\n    if i == 4:\n        continue\n    # Do for 0~9 except 4.\n\nk = \'b\'\nw = [\'a\', \'b\', \'c\', \'d\', \'e\']\nwhile w:  # Condition: \'w\' is not empty.\n    if k == w.pop():  # Remove last one and compare it with \'k\'.\n        break  # Stop the loop if k is equal with last one.\nprint(w)  # w = [\'a\'] \n # note: "for" loop is syntactic sugar based on "while" loop.\nfor c in [\'a\', \'b\', \'c\']:\n    if c == \'b\':\n        continue\n    # Do for \'a\'~\'c\' except \'b\'.\n\ni = 0\nc_list = [\'a\', \'b\', \'c\']\nwhile i < len(c_list):  # \'i\' is in the range of length of \'c_list\'.\n    c = c_list[i]  # Get the value from \'c_list\'.\n    if c == \'b\':\n        continue\n    # Do for \'a\'~\'c\' except \'b\'.\n    i += 1  # \'i\' increase 1. \n \n # Define a function \'func\'.\ndef func(a, b):\n    c = int(a)  # Copy \'a\' and turn it to an integer, and save it to \'c\'.\n    if c > 30:  # If \'c\' is over 30, set it to 30.\n       c = 30\n    return b - c  # Return a value that obtained by \'b\' minus with \'c\'.\n    # Garbage collecting for \'a\', \'b\', \'c\'. Except \'b\' - \'c\'.\n\n# Use the function.\nd = func(27.9705, 50)  # \'d\' is 23.\nd -= func(\'70\', d)  # \'d\' minus -7, so \'d\' will be set to 30.\nfunc(30.5, d)  # Return value is 0, but it will be discarded and deleted. \n # The following statements are the same in the last line of function.\ndef f(w):\n    w.append(w.pop(0))\n    # No return statement.\n\ndef f(w):\n    w.append(w.pop(0))\n    return\n\ndef f():\n    w.append(w.pop(0))\n    return None\n\n# The first is recommended. \n 延伸閱讀 -  執行緒 ： \n Qt 中的  signal  與  slot  為透過多執行緒配置實現的功能。 \n \n', 'tags': '', 'url': '控制流程.html'}, {'title': '簽章', 'text': "簽章 \n 函式 (Function) 能在特定需求時 輸入 資料與 輸出 結果，輸入與輸出值稱為 參數  (Argument)。 \n 以強型別程式語言 C 來說，一個輸入 3 個參數，輸出 1 個參數的函式是這樣宣告的： \n int func(int p0, int p1, float p2); \n 但是 Python 沒有類型標示，因此函式會如此定義： \n def func(p0, p1, p2):\n    ... \n 函式 func 的輸入與輸出類型（如「輸入 3 個參數、輸出 1 個參數」），稱為 簽章  (Signature)。 \n Python 是弱型別語言，簽章只有強制規定參數 數量 ，而沒有規定參數類型。 \n 另外，單一化的輸入需求不足以滿足函式應用範圍，而產生 多載  (Overload) 的功能，以支援不同選項、不同類型的輸入。以強型別程式語言 C++ 為例： \n // 注意：C 語言不支援多載。\n// C++ 多載宣告，編譯時會依照簽章自動生成四種函式。\n// 預設值也算是一種多載。\n// 撰寫程式時只需要寫 func 即可。\nint func(int p0, int p1, long double p2, bool p3 = false);\nint func(int p0, int p1, double p2) {\n    // 會需要寫轉換型別的接繞函式。\n    // 如果簽章搞錯，會造成無限遞迴 (Recursive)。\n    return func(p0, p1, (long double) p2);\n}\nint func(int p0, int p1, float p2) {\n    // 會需要調整設定。\n    return func(p0, p1, (long double) p2, true);\n} \n 上面的例子中，為了支援強型別的標記，函式必須製作多種不同類型的簽章，若有更多需求，則必須使用模板 (Template)： \n // 模板宣告，編譯時會自動生成多載簽章。\ntemplate <typename T>\nint func(int p0, int p1, T p2);\n// 如果要支援其他參數，又要混合多載。\nint func(int p0, int p1, long double p2, bool p3 = false); \n 在 Python 中， 沒有多載 、 沒有模板 、 沒有型別要求 ，因此大幅簡化定義。唯一要解決的問題是滿足參數數量的變化。 \n 預設值 \n 預設值只能從最後開始使用等於 = 符號 連續 定義，不可以隨意指定其中的參數。 \n 在呼叫時使用 = 符號為 關鍵字參數 ，與定義時相同，只能從最後開始 連續 填入。 \n def func(p0, p1, p2=20, p3=True):\n    ...\n\n# 可以這樣使用：\nfunc(a0, a1, a2, a3)  # 全部填滿。\nfunc(a0, a1, a2)  # 使用部分預設值。\nfunc(a0, a1, p3=a3)  # 名稱對應，使用部分預設值。\nfunc(a0, a1)  # 全部使用預設值。 \n 強制名稱對應 \n 使用特殊符號 *，其後所有參數不分順序，強制使用名稱對應。如果有參數沒有填入或沒有預設值，會引發錯誤。 \n def func(p0, p1, *, p2, p3=True):\n    ...\n\n# 可以這樣使用：\nfunc(a0, a1, p2=a2, p3=a3)  # 全部填滿。\nfunc(a0, a1, p2=a2)  # 名稱對應，全部使用預設值。 \n 順序收集與對應收集 \n 使用星號 *，該變數會收集多餘填入的 位置參數  (Positional argument)。多餘的參數會收集成 tuple 容器，若沒有多餘參數，該參數會是空的 tuple 容器。 \n 使用雙星號 **，該變數會收集多餘填入的 關鍵字參數  (Keyword argument)。多餘的參數會收集成 dict 容器，若沒有多餘參數，該參數會是空的 dict 容器。 \n 兩者可以擇一或混合使用，但是定義時單星號參數一定要在前面，其後所有參數不分順序。 \n def func(p0, p1, *p2, **p3, p4, p5=True):\n    ...\n\n# 可以這樣使用：\nfunc(a0, a1, p4=a4, p5=a5)  # 全部填滿。\n# p2 = ()\n# p3 = {}\nfunc(a0, a1, p4=a4)  # 全部使用預設值。\n# p2 = ()\n# p3 = {}\nfunc(a0, a1, b1, b2, r=b3, s=b4, p4=a3)  # 多餘值。\n# p2 = (b1, b2)\n# p3 = {'r': b3, 's': b4} \n 針對「順序容器（如 tuple、list）」或「成對容器（如 dict）」，填入時可以用 *、** 按關係填入。不過不符合簽章仍然會引發錯誤，應當注意。如： \n func(*[a0, a1, b1, b2], **{'r':b3, 's': b4, 'p4': a3})\n# 或用變數：\na_list = [a1, b1, b2]\nb_dict = {'r':b3, 'p4': a3}\nfunc(a0, s=b4, *a_list, **b_dict) \n", 'tags': '', 'url': '簽章.html'}, {'title': '複製與參照', 'text': "這邊整理關於 Python 程式語言中的「命名」規則，請學員閱讀。 \n Python 的設計構想源自  ABC  [ 1 ]，採越位規格 ( off-side rule ) 分隔程式區段，其表達式語法 (expression syntax) 與 C 語言類似 [ 2 ]，因此會提到其相關規則。在其他類似 C 的程式語言（C++、C#、Java 等，其中 C++ 文法的相似度最高）可能會使用相同的規則處理。 \n 官方 提供的 Python 單機版直譯器稱為 CPython，因為該直譯器是純 C 語言編寫，達成 Python 所有功能。除了 CPython 外，還有以 Java 編寫的  Jython ，以 .net 技術編寫的  Ironpython ，以 Python 編寫的  PyPy ，以 Javascript 編寫的  Brython ，進階版的  Stackless Python  以及專用於微控制器的  Micropython  等。CPython 的原理是將 Python script 翻譯成字節碼 (Bytecode)，並透過解析字節碼來執行，字節碼存放在 __pycache__ 資料夾中。 \n 由於 Python 文法是由 擴展巴克斯範式  (Extended Backus–Naur form, EBNF) 定義的（ 詳見此 ），因此理論上任何支援 EBNF 解析功能的程式語言都能寫成 Python 直譯器，包括 Python 本身 (PyPy)。 \n 以下章節內容關於非 Python 部分可以斟酌吸收。 \n C 的指派 \n int a = 10; \n 上面 C 程式碼的意思為：使用最大為 整數  (int) 的記憶體空間 存放 數字 10，並且在本程式 範圍  (Scope) 中，這個記憶體空間的代號為 a。 \n 在 C 語言中 記憶體空間的代號 稱為 變數  (Variable)，透過「宣告」規定在 範圍 中有哪些代號；「定義」可以做記憶體劃分和存值的動作。 \n /*\nC 語言的單行註解使用雙斜線，多行使用斜線與星號。\n每「行」結尾為分號，會忽略重複空白和所有換行記號。\n因此，C 語言可以不用縮排、全部寫同一行，難以閱讀。\n*/\n\n// C 語言可以任意規劃「範圍」或巢狀範圍，使用大括弧即可。\n{\n    // 宣告，沒有任何動作，只是給編譯器看的。\n    int a;\n    // 定義，規劃記憶體並存值。\n    a = 10;\n    {\n        // 可以一起寫。\n        int b = 20;\n        // 如果巢狀範圍宣告撞名，會將外部範圍的名稱暫時「隱藏」。\n    }\n    // 這裡不能用 b。\n} \n 在宣告的範圍外，該變數會被自動刪除，以節省記憶體。因此，在 C 語言中，任何定義的動作都會花費記憶空間。「指派」的文法如下： \n 左值 = 右值 \n 右值的計算結果為 任意記憶體大小的值 ，而左值 必須 運算出 相應大小 的記憶體空間，透過指派運算子，可以將右值的值複製到左值。另外，一些運算類的指派運算子 +=、-= 等，是將計算結果存入相同記憶體位置的意思，如 a += 10 同於 a = a + 10。 \n 甚至在範圍外，也可以使用 C 語言的指標 (Pointer) 功能，攜帶記憶體空間的鑰匙，持有鑰匙，可以直接存取記憶體。以下為 C++ 語言的一個小範例。 \n /*\n指標是一種變數！\n\n指標是一種二進位代號，代表記憶體區段的「第一個值」。\n指標的間隔數是該類型的空間大小，但是 C 語言中 +1 會自動幫忙跳號。\n*/\n\n// 假設有一把鑰匙（還沒定義）。\nint *a;\n{\n    // 使用 new 關鍵字初始化 50 個整數，並將第一把鑰匙交給 b。\n    int *b = new int[50];\n    // 將 b 鑰匙複製給 a。\n    a = b;\n}\n/*\nb 鑰匙被刪除，但是 50 個整數還在。\n如果剛才沒有複製給 a，會遺失 50 個整數的鑰匙，引發記憶體洩漏 (Memory leak)。\n*/\ncout << *(a + 2) << endl;  // 顯示第三位整數的值（第一把鑰匙 +2）。\ncout << a[0] << endl;  // 同上，顯示第一位整數的值。\ndelete[] a;  // 使用 delete 關鍵字刪除 a 鑰匙的所有值。 \n 若不使用指標，C 語言也有參照物件，相當於取綽號： \n int a = 10;\n// 為 a 變數取綽號 b。\n// 不會增加記憶體空間。\nint &b = a; \n 總結：除非特別設計，不然指派運算子都是使用 複製 ，而非參照。例如 C++ 中的「函式成本」是由於下列文法： \n // 函式是將程式碼封裝後嵌入於主程式中。\nint plus(int a, int b) { return a + b; }\n// 使用 plus\nint a = 10;\nint b = 20;\nint c = plus(a, b); \n 等價於： \n // 轉換後：\nint a = 10;\nint b = 20;\nint c;\n{\n    int _a = a;\n    int _b = b;\n    int _r = _a + _b;\n    c = _r;\n} \n 這樣每個參數都會造成龐大的傳輸成本，假如參數是攜帶龐大資料的容器，就更不得了了。因此使用 inline 函式、參照參數，或指標傳入、傳出，以節省執行時間、記憶空間。 \n 上述流程是不是十分繁瑣且危險？在 Python 中，參考自其他程式語言，引入垃圾回收機制 (Garbage collection)，取代了指標和參照物件的功能。 \n Python 的指派 \n Python 的變數稱為 名稱  (Name)，可以視作一張 範圍通行證 ，而非記憶體代號，已經跟 C 語言的意思不一樣了。而透過「指派」，可以發通行證給任何數值，不用管記憶體大小。一句話解釋規則： \n \n 所有的數值會自動追蹤與管理，擁有一個或多個名稱的值 可以在該作用範圍使用 ，失去所有名稱的值 會被刪除 。 \n \n Python 的表達式 (Expression) 中有種數值稱為字面數值 (literal value)，意指寫出來就是該值，例如 70 的類型是 int；(1, 2, 3) 的類型是 tuple；[1, 2, 3] 的類型是 list；{'a': 20, 'c': 80} 的類型是 dict。不過只有部分字面數值，任何時候寫出來都 永遠共享記憶體 ，特徵是不能改變值 (Mutable)，所有 method 操作結果都回傳副本，不改原始值。 只有  None、bool、int、float、complex、所有字串 (string)、tuple 類型。 \n # 相同值的共享記憶體檢查\n# 用 is 運算子可以檢查是否為相同記憶體。\n# int\nprint(10 is 10)  # True\n# tuple\nprint(() is ())  # True\n# list\nprint([] is [])  # False\n# dict\nprint({} is {})  # False \n 來段範例： \n # 發通行證 a 給數值 10。\na = 10\n# 通行證 a 的持有者是 10，發通行證 b 給數值 10。\nb = a\nprint(a is b)  # True\n\n# b += 5 來自 C 語言，同於 b = b + 5。\n# 對通行證 b 的值做 +5 計算，並對該值發通行證 b。\n# 通行證 b 被拔除自 10，交給結果 15。\nb += 5\nprint(b)  # 15\nprint(a)  # 10\nprint(a is b)  # False \n 來一段容器的範例： \n # list 容器\na = [1, 2, 3]\nb = a\nprint(a is b)  # True\n\n# 對通行證 b 的容器操作，在尾端加入 4。\nb.append(4)\n# 使用 del 關鍵字，對通行證 b 的容器操作，刪除第二位值 2。\ndel b[1]\nprint(b)  # [1, 3, 4]\nprint(a)  # [1, 3, 4]\n\n# 幫當前的 a 值複製，重發通行證 b 給複製體。\nb = a.copy()\n# 讓 a 刪除最後一項。\na.pop()\nprint(a)  # [1, 3]\nprint(b)  # [1, 3, 4]\nprint(a is b)  # False \n 活用上述概念，可以輕鬆達成複製 (Copy) 與參照 (Reference) 功能。 \n 最後介紹範圍的規則： \n # Python 中，唯二的範圍界線為 Function 與 Class 的定義，而非縮排。\n\ndef func(b):\n    # 通行證 c 只有效於 func 中。\n    # 回傳值計算完後通行證 c 會被移除（垃圾回收）。\n    c = 20\n    return b + c\n\n# 全域通行證 g\ng = 'abc'\n\n# 主程式與 func 的範圍沒有巢狀關係。\ndef main():\n    a = 10\n    # a 進入 func 函數，獲得區域通行證 b。\n    # 回傳值 30 被丟出 func，獲得區域通行證 d。\n    d = func(a)\n    print(d)  # 30\n\n    # 巢狀函式有巢狀範圍界線。\n    def nest_func():\n        # 使用 global 關鍵字指定全域通行證 g。\n        global g\n        # 全域通行證 g 重新發給 50。\n        g = 50\n        # 使用 nonlocal 關鍵字指定上層的區域通行證 d。\n        nonlocal d\n        # 上層的區域通行證 d 重新發給 20。\n        d = 20\n\n    # 執行巢狀函式。持有 d 的 30 被刪除；持有 g 的 'abc' 被刪除。\n    nest_func()\n    print(g)  # 50\n    print(d)  # 20\n\n# 執行 main\nif __name__ == '__main__':\n    main() \n", 'tags': '', 'url': '複製與參照.html'}, {'title': '物件導向', 'text': '請學員瞭解關於物件導向的概念及特性。 \n 非物件導向 \n 名詞解釋： \n \n 變數 (Variable)：代表儲存一個或多個的 單一資料 或 資料集 ，能夠被 定義  (Define) 與 引用  (Reference)。 \n 函式 (Function)：封裝的程式碼（在程式中定義），以能在特定需求時 輸入 資料與 輸出 結果。 \n \n 通常物件導向的程式語言會比較高階，也能夠支援非物件導向的操作。不過有些特例如 C# 語言，所有程式碼必須在物件導向概念中實現，非物件導向的實作則是「靜態函式」對應一般函式；「靜態類別」對應模組 (Module)，甚至連進入點 (Entry point) 都必須在類別中。 \n 物件導向 \n 名詞解釋： \n \n 類別 / 類型 / 型別 (Type / Class / Identifier)：定義 資料形式 與 資料操作 。類別 (Type) 一般是指簡單二進位可表達的資料型態；類型 (Class) 是指特別定義過的資料結構或資料集；型別 (Identifier) 則是強型別 (Strong typed) 程式語言用來標記資料格式的名稱。 \n 物件 (Object)：是 類別 的 實例  (Instance)，可以被變數儲存。 \n \n 在擁有物件導向的程式語言中， 函式也是一種物件 ，並且有自己的類別，如 匿名函式  (Anonymous function, Function literal, Lambda expression)。 \n 程式中若要獲得物件，是 由類別產生 ，或使用字面表示式 (Literal expression)。而某些能夠支援更抽象概念的程式語言中，類別也是一種物件，因此類別也有自己的類別，稱為 元類  (Meta Class)，如 Python。 \n 類別有以下特性： \n \n 封裝性 (Encapsulation)：可以 攜帶各種資料或資料集 ，並且由於物件是實例的關係，每個物件是獨立個體，其資料可以有著不同的內容。 \n 繼承 (Inheritance)：定義簡單的類別後，較複雜的類別可以從簡單的類別 提取其功能 。 \n 多形 (Polymorphism)： 不同類別 可能會有 相同操作 。程式碼在使用該物件時， 強型別 的程式語言（如 C++）必須特別規範， 弱型別 的程式語言（如 Python）會嘗試尋找並進行該操作。 \n 抽象性 (Abstraction)：透過 繼承 和 元類 概念可以表達更抽象的物件概念。 \n \n 以下將示範 Python 程式碼中如何用 封裝性 與 繼承 呈現各種特性。 \n 封裝性 \n Python 的基本類型定義語法如下： \n # Python 中的類型名稱使用 Camal case（單字首大寫）。\n# 每個類型與函式定義之間空兩行。\nclass MyClass:\n\n    """定義 my class。"""\n\n    def __init__(self, score):\n        """初始化函式。\n        類別中的 function 稱為方法 (Method)，\n        其中第一項參數 self 代表此物件。\n        實際呼叫時會自動填入。\n        """\n        print("初始化！")\n        # 類別中的「變數」稱為成員 (Member)。\n        # 類別中的「名稱」稱為屬性 (Attribute)。\n        # members 和 methods 都是 attributes。\n        # attributes 使用「點」運算子取得。\n        self.score = score\n        # 私有 attributes 名稱前加上雙底線。\n        # 名稱會被編碼為 "_MyClass__score"。\n        # 除非用上述名稱呼叫，\n        # 只有本類別的 method 可以呼叫。\n        self.__score = score + 10\n\n    def method1(self, p0):\n        """一個公開的 method，\n        任何使用本物件的程式都可以呼叫。\n        """\n        print("method 1:", self.__score)\n        # 呼叫一個私有 method。\n        self.__method2(p0)\n\n    def __method2(self, p0):\n        """一個私有的 method。"""\n        print("method 2:", p0)\n\n\n# 初始化一個 MyClass 實例。\na = MyClass(50)  # 初始化！\nprint(a.score)  # 50\na.method1(20)  # method 1: 60\n               # method 2: 20\n# 強迫呼叫\nprint(a._MyClass__score)  # 60\n# 強迫呼叫\na._MyClass__method2(30)  # method 2: 30 \n 上面的類型中，呈現了 封裝性 的效果，一個 MyClass 物件中擁有公有與私有的 attributes，當使用 a 名稱傳送此物件時，隨時可以使用公開 attributes。 \n 繼承 \n 繼承可以將較小類型的 attributes 全部拿來用。在 Python 中，有個類型叫做 object，提供一些預設特性，所有類型如果沒指定都會繼承它。 \n 繼承語法如下： \n # 引用斜邊公式 hypotenuse。\nfrom math import hypot\n\nclass Point:\n\n    """點資料集。"""\n\n    def __init__(self, x, y):\n        """初始化時設定兩座標並顯示。"""\n        self.x = x\n        self.y = y\n        self.__show()\n\n    def __show(self):\n        """印出 x 和 y。"""\n        print(self.x, self.y)\n\n    def distance(self, c):\n        """回傳兩點的距離。"""\n        return hypot(c.x - self.x, c.y - self.y)\n\n    def move(self, x, y):\n        """移動座標。"""\n        self.x = x\n        self.y = y\n\n\nclass PointView(Point):\n\n    """檢視用的類型，繼承自點。"""\n\n    def __init__(self, x, y):\n        # 引用上一個繼承項的 __init__ 函式。\n        super(Coordinate, self).__init__(x, y)\n        print("Point view")\n\n    def distance_with_origin(self):\n        """此點與原點的距離。"""\n        return hypot(self.x, self.y)\n\n    def __repr__(self):\n        """覆寫預設函式 __repr__。\n        此函式可以定義物件轉成字串時的樣式。\n        """\n        return f"<Point x={self.x} y={self.y}>"\n\n\n# 建立點資料 p1。\np1 = Point(20, 30)  # 20 30\n# 建立點資料 p2。\np2 = PointView(50, 70)  # 50 70\n                        # Point view\n# 顯示距離。\nprint(p2.distance(p1))  # 50\n# 顯示 p2 與原點的距離。\nprint(p2.distance_with_origin())  # 86.02325267042627\n# 印出 p1 和 p2。\n# 印的時候會呼叫預設函式 __repr__。\nprint(p1)  # <Point object at 一段記憶體位址>\nprint(p2)  # <Point x=50 y=70> \n 上面的範例中，PointView 繼承自 Point，因此會擁有所有 Point 的公有與私有 attributes，但是私有 attributes 會被編成 _Point__show 的樣式，因此不能直接使用。 \n 另外，當 PointView 的屬性名稱與 Point 重複時（如 __init__），會直接覆蓋，因此必須使用 super 函式搜尋到 Point 類型，將 PointView 實體帶入 Point.__init__ 執行。 \n 靜態方法 \n 靜態方法 (static method) 只是掛上類別名稱的函式 (static method)。在 Python 中，靜態方法可以有兩種定義法，稱為 static method 與 class method。 \n class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, p):\n        """實做相等運算子 ==。"""\n        return self.x == p.x and self.y == p.y\n\n    @staticmethod\n    def s_method(x, y):\n        """Static method."""\n        return Point(x + 10, y + 10)\n\n    @classmethod\n    def c_method(cls, x, y):\n        return cls(x + 10, y + 10)\n\n\np1 = Point.s_method(20, 30)\np2 = Point.c_method(20, 30)\nprint(p1 == p2)  # True \n 兩者的差異只在於 class method 的會傳入當前類型，所以在繼承上有差別。 \n 延伸閱讀 - 類別與實體的關係 \n 類別也有 attributes，稱為 class attributes。如 Point.__init__、Point._Point__show 等。而 p1.x 是因為上面的範例使用 self.x = x 的語法產生，這是後天賦予物件的，又稱 object attributes。物件可以使用 class attributes，但是類別沒有 object attributes。 \n 關於 class attributes，每個 object 的 class member 其實是使用相同名稱，但是 class method 是複製過來的，如下： \n class A:\n    a = 10\n    def method(self, p0, p1):\n        pass\n\na = A()\nb = A()\nprint(a.a is b.a)  # True\nprint(a.method is b.method)  # False \n 是因為下列程式是相同結果的： \n a.method(p0, p1)\nA.method(a, p0, p1) \n Python 內建的 type 函式會回傳實體的類型。而事實上 type 是一種類型，而且是所有類型的元類，因此初始化時可以「作出」實體的類型。 \n', 'tags': '', 'url': '物件導向.html'}, {'title': '類型註解', 'text': '基於協同開發，Python 引入了選擇性的類型註解。 \n 學員可以藉由類型註解，在程式碼協同時較快辨認變數類型。 \n 類型註解 \n 類型註解 (Typing) 是一種 註解 ，可以為每種參數進行標示。由於文法問題，類型註解並不是強迫性的，不過仍有效用。可藉由每個範圍 (Scope) 的 __annotations__ 名稱取得，若有工具或 IDE 的功能，可以進行靜態分析。 \n 以下內容依據為  PEP 484 。 \n 省略記號 \n 省略記號 (Ellipsis)「...」在 Python 中是一種佔位符號，可以在註解中代表多個類似物件，也能取代 pass 關鍵字。 \n 等價表示 \n 預設該值如果為 Any 或可以明確推斷，可以選擇不標示。 \n 其中： \n \n type(None) 標示為 None。 \n object 標示為 Any。 \n 會導致錯誤時標示為\xa0NoReturn，僅可用於回傳值。 \n \n 基本文法 \n Python 為 弱型別  (Weak typing) 語言，又稱 鴨子型別  (Duck type)，相較於 強型別  (Strong typing) 語言，只要變數能用即可，不能用就引發錯誤。當然這只能在相對安全的直譯式語言 (Interpreted language) 中，因為這裡只要使用 try 語句即可： \n try:\n    # 測試 a 能不能執行 test_method。\n    b = a.test_method()\nexcept AttributeError:\n    # 沒有 test_method。\n    c = 20\nelse:\n    c = b * 2 \n 但是因為執行效能與開發效率問題，一直測試顯然不是好方法，因此 Python 在簽章上引入了類型註解的文法。 \n 簽章的參數中，使用「:」符號後連接類型名稱；回傳值則是使用「->」記號連接。參照於一般英文符號以及 運算子必須由空白環繞  ( PEP 8 ) 的規定，「:」符號會連接前一個表示式，與下一個表示式間隔空白；「->」記號則是必須由空白環繞。 \n # 只能從預設值或參數名稱猜測。\ndef func(p0, p1=20, p2=True):\n    ...\n\n# 直接規定型別。\ndef func(p0: int, p1: int = 20, p2: bool = True) -> List[str]:\n    ...\n\n# 若是太長可以利用括弧換行。\ndef func(\n    number: int,\n    size: int = 20,\n    reverse: bool = True\n) -> List[str]:\n    ... \n 在 Python 3.6 新增單一變數的類型註解文法 ( PEP 526 )。 \n 不過一般可直接辨識的變數就不會使用，例如直接賦予類型的初始化物件。 \n # 等等會裝入整數。\na: List[int] = []\n# 這麼明顯就不用了。\na: MyClass = MyClass() \n 類型註解也支援名稱替換： \n Point = Tuple[float, float]\nPointPair = Tuple[Point, Point]\ngraphics: Dict[str, List[PointPair]] = {} \n 參數輸入值的類型註解一般也是用**鴨子型別**的概念標示，提醒開發者「需要這樣使用」，而非「一定需要這種類型」。如： \n def func(w) -> bool:\n    """w 是一個會進行疊代與檢索的物件。"""\n    for i in range(20):\n        for k in w:\n            if w[i + 2] == \'z\':\n                return True\n\n# 應該標示成序列：\nw: Secquence[int]\n# 而非強迫成某種型態：\nw: List[int]\nw: Tuple[int, ...] \n 自 Python 3.5 起支援，支援 放入 或 回傳 的型別必須由標準模組 typing 提供。類型中的類型註解名稱會跟一般內建類型名稱不一樣，改成字首大寫。 \n 通常 typing 模組的導入習慣將相同性質的類型一起擺放。 \n from typing import (\n    # 狀態變數\n    TYPE_CHECKING,\n    # 序列\n    Tuple,\n    List,\n    Secquence,\n    # 二元搜尋樹\n    Set,\n    Dict,\n    # 可呼叫物（函式）\n    Callable,\n    # 迭代器與生產器\n    Iterator,\n    Generator,\n    # 邏輯判斷\n    Optional,\n    Union,\n    Any,\n    # 泛型\n    Generic,\n    # 函式或裝飾器\n    TypeVar,\n    overload,\n) \n 以下將介紹上述常用的類型標示。 \n 容器 \n 使用單一項目的容器： \n # 其實 tuple 容器是固定長度的。\nmy_tuple: Tuple[int, int] = (20, 20)\n# 不限長度的容器。\nmy_list: List[float] = [20., 50.02, -3.006]\n# 不限長度的 tuple 容器（其他變數決定）。\nmy_tuple: Tuple[int, ...] = tuple(i for i in range(s))\n# 巢狀標示。\nw: Set[Tuple[int, int]] = {(10, 20), (30, 40), (50, 60)} \n 使用成對項目的容器： \n d: Dict[str, List[int]] = {\n    \'s\': [10, 20, 30],\n    \'b\': [],\n    \'f\': [77, 66, 55, 44],\n} \n 函式物件 \n 函式物件使用 Callable 來標示： \n Callable[[input_type, ...], return_type] \n 範例： \n def func(n: int) -> int:\n    """一般函式"""\n    return n * 6\n\n# 匿名函式\nk = lambda s, end: s.replace(\'gen\', \'time\') + end\n\nfunc: Callable[[int], int]\nk: Callable[[str, str], str] \n 迭代器與生產器 \n 使用 yield 關鍵字可以搭配 def 關鍵字定義一個 迭代器  (Iterator) 或 生產器  (Generator) 函式： \n def double_range(n):\n    """這個 double_range 是一個函式\n    但是可以產生以下程式碼的迭帶器物件。\n\n    若當中使用 return 關鍵字，會引發 StopIteration 錯誤。\n    不過也可以是無限迴圈。\n    """\n    for i in range(n):\n        yield i * 2\n\n# 建立迭帶器物件 "ten_double_range"。\nten_double_range = double_range(10)\n# 使用用內建函式 next 可以產生下一個值。\nprint(next(ten_double_range))  # 0\nprint(next(ten_double_range))  # 2\nprint(next(ten_double_range))  # 4\n# 或是使用 for 迴圈連續取值，\n# 直到引發 StopIteration 錯誤（不會引發實際 Error）。\nfor factor in ten_double_range:\n    print(factor)  # 6 8 10 12 14 16 18 20\n# 當取完值後，再次呼叫會引發 StopIteration 錯誤。\n# 此時迭帶器物件無法再使用，必須丟棄。\n# next(ten_double_range) \n 生產器範例： \n def double_inputs():\n    """這個 double_inputs 是一個函式\n    但是可以產生以下程式碼的生產器物件。\n\n    生產器可以接收值。\n    """\n    while True:\n         # 當 yield 擺在右值時可以接收值。\n         x = yield\n         # 當 yield 右邊有值時可以產生值。\n         yield x * 2\n         # 不使用名稱可以這樣寫。\n         yield (yield) * 2\n\ngen = double_inputs()\nnext(gen)  # 跳至第一個 yield，不過會回傳 None。\nprint(gen.send(10))  # 輸入 10，回傳 20。\nnext(gen)  # 跳至下一個 yield，不過會回傳 None。\nprint(gen.send(6))  # 輸入 6，回傳 12。 \n 類型標註如下： \n Iterator[yield_type]\n# Python 3.6 增加\nGenerator[yield_type, input_type, return_type] \n 上述製造迭代器與生產器的函式應標註為： \n \n def double_range(n: int) -> Iterator[int]:\n    ...\n\ndef double_inputs() -> Generator[int, int, None]:\n    ...\n\nten_double_range: Iterator[int]\ngen: Generator[int, int, None] \n 邏輯判斷 \n 類型註解包含 被繼承 類型，因此其實每個物件都適用 object 類型。 \n 若是沒有繼承關係，但是可以進行相同操作，因此 typing 模組提供方便的邏輯標示。 \n 聯集 (Union) 類型能夠代表多個不同的類型： \n Union[T1, T2, ...] \n 選擇性 (Optional) 類型能夠代表該類型可能會為 None： \n Optional[T]\n# 同於 Union\nUnion[T, None] \n 可以用在簽章的預設值： \n def func(w: List[int] = []):\n    """這樣會導致預設值的指標被共用。"""\n    ...\n\ndef func(w: Optional[List[int]] = None):\n    """這樣就不會共用。"""\n    if w is None:\n        w = []\n    ... \n 泛型 \n 自訂類型中有客製化的類型選擇時，就可以用泛型標示。 \n 例如： \n from abc import abstractmethod\nfrom typing import Iterator, Generic, TypeVar\n\n_T = TypeVar(\'_T\')\n\nclass BaseTable(OtherTable, Generic[_T]):\n    @abstractmethod\n    def data(self, row: int) -> _T:\n        ...\n\n    def data_iter(self) -> Iterator[_T]:\n        for row in range(self.row_count()):\n            yield self.data(row)\n\nclass MyTable(BaseTable[float]):\n    def data(self, row: int) -> float:\n        """實作此方法。"""\n        ... \n 上述的 MyTable 類型的 data_iter 方法就會回傳 Iterator[float] 類型了。 \n 遞迴引用 \n 遞迴引用類型註解時，直接使用字串即可： \n Node: Dict[str, Optional[List[\'Node\']]] \n 在類型定義中引用自己： \n class MyClass:\n    def return_me(self, friend: \'MyClass\') -> \'MyClass\':\n        """實例 self 可能是子類型，因此不會標示。"""\n        ... \n 無法導入的名稱或模組： \n from typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    from core import MyClass\n\nclass LocalClass:\n    def __init__(self, parent: \'MyClass\'):\n        """想要取得父項的屬性。"""\n        self.my_list = parent.parent_list\n        ... \n 而在 Python 3.7 中，引入了新的延遲分析行為 ( PEP 563 : Postponed Evaluation of Annotations)，將會強制將類型註解轉為字串再分析，並且這將是 Python 4 的預設作為。不過此行為牽涉到文法問題，因此使用向下相容模組 __future__ 來開啟。 \n 這樣一來，在「舊版」的 Python 中就可以使用遞迴引用了。 \n from __future__ import annotations\n\nclass MyClass:\n    def return_me(self, friend: MyClass) -> MyClass:\n        ... \n \n', 'tags': '', 'url': '類型註解.html'}, {'title': '開發', 'text': '取得 Pyslvs 原始碼: \n git clone --recurse-submodules https://github.com/KmolYuan/Pyslvs-PyQt5 \n 本倉儲有兩個主要分支：master 分支為當前穩定版本；dev 分支為開發中版本。每當切換分支時，請注意子倉儲的版次是否有變動，使用以下指令更新： \n git submodule update --recursive \n 若有更新，必須重新編譯核心。 \n 位於 pyslvs 目錄中的 unittest 程式: \n # -*- coding: utf-8 -*-\n\n"""This module will test the functions of Pyslvs."""\n\n__author__ = "Yuan Chang"\n__copyright__ = "Copyright (C) 2016-2018"\n__license__ = "AGPL"\n__email__ = "pyslvs@gmail.com"\n\nimport unittest\nfrom unittest import TestCase\nfrom typing import Tuple, List\n\n#For necessary testing modules.\nfrom math import sqrt, radians, isclose\nfrom pmks import VPoint\nimport bfgs\nfrom tinycadlib import (\n    Coordinate,\n    PLAP,\n    PLLP,\n    PLPP,\n    PXY,\n    expr_solving,\n    data_collecting,\n)\nfrom planarlinkage import Planar\nfrom rga import Genetic\nfrom firefly import Firefly\nfrom de import DiffertialEvolution\nfrom number import number_synthesis\nfrom topologic import topo, Graph\nfrom triangulation import vpoints_configure\nfrom _parser import parse_vpoints\nfrom examples import example_list\n\n\nclass CoreTest(TestCase):\n    \n    """Testing Cython libs."""\n    \n    def vpoints_object(self) -> Tuple[List[VPoint], Tuple[Tuple[int, int]]]:\n        """Example: Jansen\'s linkage (Single)."""\n        expr, inputs = example_list["Jansen\'s linkage (Single)"]\n        return parse_vpoints(expr), inputs\n    \n    def planar_object(self) -> Planar:\n        """Test-used mechanism for algorithm."""\n        return Planar({\n            \'Driver\': {\'P0\': (-70, -70, 50)},\n            \'Follower\': {\'P1\': (70, -70, 50)},\n            \'Target\': {\'P4\': [\n                (60.3, 118.12),\n                (31.02, 115.62),\n                (3.52, 110.62),\n                (-25.77, 104.91),\n                (-81.49, 69.19),\n                (-96.47, 54.906),\n                (-109.34, 35.98),\n                (-121.84, 13.83),\n                (-127.56, -20.09),\n                (-128.63, -49.74),\n                (-117.56, -65.45),\n            ]},\n            \'Expression\': "PLAP[P0,L0,a0](P2);" +\n                "PLLP[P2,L1,L2,P1](P3);" +\n                "PLLP[P2,L3,L4,P3](P4)",\n            \'constraint\': [(\'P0\', \'P1\', \'P2\', \'P3\')],\n            \'upper\': [100., 100., 100., 100., 100., 360.],\n            \'lower\': [5., 5., 5., 5., 5., 0.],\n        })\n    \n    def test_plap(self):\n        """Test for PLAP function."""\n        A = Coordinate(0, 0)\n        B = Coordinate(50, 0)\n        x, y = PLAP(A, 50 * sqrt(2), radians(45), B)\n        self.assertTrue(isclose(x, 50))\n        self.assertTrue(isclose(y, 50))\n    \n    def test_pllp(self):\n        """Test for PLLP function."""\n        A = Coordinate(-30, 0)\n        B = Coordinate(30, 0)\n        x, y = PLLP(A, 50, 50, B)\n        self.assertTrue(isclose(x, 0))\n        self.assertTrue(isclose(y, 40))\n        x, y = PLLP(A, 30, 30, B)\n        self.assertTrue(isclose(x, 0))\n        self.assertTrue(isclose(y, 0))\n        x, y = PLLP(A, 90, 30, B)\n        self.assertTrue(isclose(x, 60))\n        self.assertTrue(isclose(y, 0))\n    \n    def test_plpp(self):\n        """Test for PLPP function."""\n        A = Coordinate(0, 0)\n        B = Coordinate(0, -3)\n        C = Coordinate(3/2, 0)\n        x, y = PLPP(A, sqrt(5), B, C)\n        self.assertTrue(isclose(x, 2))\n        self.assertTrue(isclose(y, 1))\n    \n    def test_pxy(self):\n        A = Coordinate(80, 90)\n        x, y = PXY(A, 40, -20)\n        self.assertTrue(isclose(x, 120))\n        self.assertTrue(isclose(y, 70))\n    \n    def test_topologic(self):\n        """Testing \'topologic\' libraries.\n        \n        + \'topo\' function.\n        + \'Graph\' class.\n        """\n        G = Graph([(0, 1), (0, 4), (1, 5), (2, 3), (2, 4), (3, 5), (4, 5)])\n        H = Graph([(0, 2), (0, 4), (1, 3), (1, 4), (2, 5), (3, 5), (4, 5)])\n        I = Graph([(0, 1), (0, 2), (1, 4), (2, 5), (3, 4), (3, 5), (4, 5)])\n        self.assertTrue(G.is_isomorphic(H))\n        self.assertFalse(G.is_isomorphic(I))\n        answer, time = topo([4, 2], degenerate=True)\n        self.assertEqual(len(answer), 2)\n    \n    def test_solving(self):\n        """Test triangular formula solving.\n        \n        + Test for PMKS parser.\n        + Test data collecting function.\n        + Test expression solving function.\n        """\n        vpoints, inputs = self.vpoints_object()\n        self.assertTrue(len(vpoints) == 8)\n        exprs = vpoints_configure(vpoints, inputs)\n        mapping = {n: \'P{}\'.format(n) for n in range(len(vpoints))}\n        data_dict, dof = data_collecting(exprs, mapping, vpoints)\n        for link, link_length in (\n            (\'L0\', 15.002083188677497),\n            (\'L1\', 41.50187586121861),\n            (\'L2\', 49.9949057404852),\n            (\'L3\', 40.09650982317538),\n            (\'L4\', 55.80253220060896),\n            (\'L5\', 61.90525179659639),\n            (\'L6\', 39.302800154696364),\n            (\'L7\', 36.69767567571548),\n            (\'L8\', 39.395233214184685),\n            (\'L9\', 48.995886562037015),\n            (\'L10\', 65.69940106271898),\n        ):\n            self.assertTrue(isclose(data_dict[link], link_length))\n        self.assertEqual(dof, 1)\n        result = expr_solving(exprs, mapping, vpoints, [0.])\n        x, y = result[-1]\n        self.assertTrue(isclose(x, -43.17005515543241))\n        self.assertTrue(isclose(y, -91.75322590542523))\n    \n    def test_bfgs(self):\n        """Test Sketch Solve kernel."""\n        input_data, output_data, grad_data = bfgs.test_kernel()\n        self.assertEqual(input_data[0], (0.0, 0.0))\n        self.assertEqual(input_data[1], (5.0, 0.0))\n        self.assertEqual(input_data[2], (6.0, 5.0))\n        self.assertEqual(input_data[3], (6.0, 5.0))\n        self.assertEqual(input_data[4], (30.0, 10.0))\n        self.assertTrue(isclose(round(output_data[2][1], 2), 10))\n        self.assertTrue(isclose(round(output_data[4][0], 2), 30))\n        vpoints, inputs = self.vpoints_object()\n        result = bfgs.vpoint_solving(vpoints, [(0, 1, 0.)])\n        x, y = result[-1]\n        self.assertTrue(isclose(round(x, 2), -43.17))\n        self.assertTrue(isclose(round(y, 2), -91.75))\n    \n    def test_number_synthesis(self):\n        """Test Number Synthesis function."""\n        for NL, NJ in [(4, 4), (6, 7), (8, 9), (10, 12)]:\n            for factors in number_synthesis(NL, NJ):\n                count = 0\n                for i, factor in enumerate(factors):\n                    count += factor * (i + 2)\n                self.assertEqual(int(count / 2), NJ)\n    \n    def test_algorithm_rga(self):\n        """Real-coded genetic algorithm."""\n        fun1 = Genetic(self.planar_object(), {\n            \'maxTime\': 1, \'report\': 10,\n            #Genetic\n            \'nPop\': 500,\n            \'pCross\': 0.95,\n            \'pMute\': 0.05,\n            \'pWin\': 0.95,\n            \'bDelta\': 5.,\n        })\n        fun1.run()\n    \n    def test_algorithm_firefly(self):\n        """Firefly algorithm."""\n        fun2 = Firefly(self.planar_object(), {\n            \'maxTime\': 1, \'report\': 10,\n            #Firefly\n            \'n\': 80,\n            \'alpha\': 0.01,\n            \'betaMin\': 0.2,\n            \'gamma\': 1.,\n            \'beta0\': 1.,\n        })\n        fun2.run()\n    \n    def test_algorithm_de(self):\n        """Differtial evolution."""\n        fun3 = DiffertialEvolution(self.planar_object(), {\n            \'maxTime\': 1, \'report\': 10,\n            #DE\n            \'strategy\': 1,\n            \'NP\': 400,\n            \'F\': 0.6,\n            \'CR\': 0.9,\n        })\n        fun3.run()\n\n\nif __name__ == \'__main__\':\n    unittest.main()\n \n 以 Eric6 IDE 開啟 Pyslvs 專案: \n \n', 'tags': '', 'url': '開發.html'}, {'title': 'Windows 開發', 'text': '下載  Qt 可攜程式開發套件.7z  （下載檔案約 8GB, 解開壓縮後約 21GB）或使用 Python 3.7.0 與 Msys2\xa0 製作的  p37_adv （下載檔案約 5.3 GB, 解開壓縮約 14 GB）執行 start.bat。 \n 其中所需要的套件已安裝在可攜程式當中，可參考模組需求清單 requirements.txt。 \n 若要完成獨立可執行檔案的發布，必須另外安裝  PyInstaller  模組： \n python -m pip install pyinstaller \n 編譯 GUI 套件: \n 進入 Pyslvs-PyQt5 目錄後, 執行: \n mingw32-make \n 完成後, 以 2018.09 版次為例, dist 目錄中將得到可執行檔案: \n pyslvs-18.9.0.mscv1900-amd64.exe \n 編譯程式庫: \n 在命令列中更換目錄至 core\\libs\\pyslvs 後, 執行: \n mingw32-make \n 建立下列動態連結程式庫 (pyd): \n bfgs.cp36-win_amd64.pyd\nde.cp36-win_amd64.pyd\nfirefly.cp36-win_amd64.pyd\nnumber.cp36-win_amd64.pyd\nplanarlinkage.cp36-win_amd64.pyd\npmks.cp36-win_amd64.pyd\nrga.cp36-win_amd64.pyd\ntinycadlib.cp36-win_amd64.pyd\ntopologic.cp36-win_amd64.pyd\ntriangulation.cp36-win_amd64.pyd\nverify.cp36-win_amd64.pyd \n', 'tags': '', 'url': 'Windows 開發.html'}, {'title': '環境修正', 'text': '從  p37  標準版升級能夠以  Msys2  編譯 Pyslvs-PyQt5 \n pip install pyqtchart lark-parser networkx ezdxf peewee openpyxl psutil pyinstaller cffi pyyaml \n cygwinccompiler.py 修改 \n 套用編譯器設定的補釘，其位於 Pyslvs 專案的 platform 目錄中。 \n patch p37\\lib\\distutils\\cygwinccompiler.py platform\\patch.diff \n patch.diff 內容： \n --- cygwinccompiler.py\n+++ cygwinccompiler.py\n@@ -82,7 +82,21 @@ def get_msvcr():\n         elif msc_ver == \'1600\':\n             # VS2010 / MSVC 10.0\n             return [\'msvcr100\']\n+        elif msc_ver == \'1700\':\n+            # Visual Studio 2012 / Visual C++ 11.0\n+            return [\'msvcr110\']\n+        elif msc_ver == \'1800\':\n+            # Visual Studio 2013 / Visual C++ 12.0\n+            return [\'msvcr120\']\n+        elif msc_ver == \'1900\':\n+            # Visual Studio 2015 / Visual C++ 14.0\n+            # "msvcr140.dll no longer exists" http://blogs.msdn.com/b/vcblog/archive/2014/06/03/visual-studio-14-ctp.aspx\n+            return [\'vcruntime140\']\n+        elif msc_ver == \'1910\':\n+            return [\'vcruntime140\']\n+        elif msc_ver == \'1914\':\n+            return [\'vcruntime140\']\n         else:\n             raise ValueError("Unknown MS Compiler version %s " % msc_ver)\n \n 增加\xa0distutils.cfg 檔案 \n 在 p37\\Lib\\distutils 目錄中新增 distutils.cfg \n echo [build]>> p37\\Lib\\distutils\\distutils.cfg\necho compiler = mingw32>> p37\\Lib\\distutils\\distutils.cfg \n 修改\xa0_advapi32.py 檔案 \n 修改 p37\\Lib\\site-packages\\win32ctypes\\core\\cffi\\_advapi32.py \n 蓋掉第 197 與 199 行 \n #c_creds.CredentialBlobSize = \\\n\n    #ffi.sizeof(blob_data) - ffi.sizeof(\'wchar_t\') \n', 'tags': '', 'url': '環境修正.html'}, {'title': 'PyInstaller 對 Windows 的支援', 'text': '官方說明： https://pyinstaller.readthedocs.io/en/stable/man/pyi-makespec.html#windows-and-mac-os-x-specific-options \n \n 預設包裝時採用不關閉主控台選項（不使用 -w），目的是顯示 Pyslvs 的版本資訊，關閉後將會無法使用 --help 或 --version 等不啟動 GUI 的顯示功能。 \n 在 Windows 中必須手動加入除了端口程式庫 pyd 以外的相依外部程式庫，如 SWIG 與 PyQt sip 的隱式導入。 \n 在 Windows 中的圖示格式為 ico。 \n \n', 'tags': '', 'url': 'PyInstaller 對 Windows 的支援.html'}, {'title': 'Ubuntu 開發', 'text': '安裝 python3-dev 與 swig 套件： \n sudo apt update\nsudo apt install python3-dev swig \n 取得 Pyslvs 原始碼： \n git clone --recurse-submodules https://github.com/KmolYuan/Pyslvs-PyQt5 \n 安裝需要的 Python 模組： \n sudo pip3 install -r requirements.txt \n 完整編譯： \n make \n 可以在倉儲目錄下的 out 資料夾中取得 AppImage 可執行檔（詳見下一節說明）。 \n 編譯核心： \n # 所有程式庫\nmake build-kernel\n\n# Pyslvs 程式庫\nmake build-pyslvs\n\n# Python-Solvespace 程式庫\nmake build-solvespace \n 執行腳本： \n python3 launch_pyslvs.py \n', 'tags': '', 'url': 'Ubuntu 開發.html'}, {'title': 'AppImage 包裝', 'text': '官方網站： https://appimage.org/ \n 在不同的 Linux 作業系統下有著不一樣的程式庫版本，由於程式之間的「相依性」十分高，會造成程式編譯後無法移植到其他環境中使用，即使編譯端與客戶端的作業系統是一樣的。 \n AppImage 的目標是將編譯端的程式可以編一到任何「目標作業系統」都可以執行。而「目標作業系統」必須符合對應的環境需求（相依程式庫版本必須滿足）。最差的情況是必須「完全符合或較新」；最完美的情況甚至是「不用安裝」。 \n 使用的原理是 App Dir 壓縮包配上腳本檔案，執行時會解壓縮到帳戶的 /tmp 目錄（並且會附加 Hash code），而此一壓縮包會包含所有程式所需要的相依程式庫或套件。 \n AppImage releases 標榜「不使用 sudo」、「選擇性安裝」以及支援版本升級功能。 \n 包裝的建立是透過 bash 腳本使用 AppImage tool kits，支援基本的自動「程式與程式庫相依性分析」的功能。不過在過度「客製化」的開發環境下，開發者必須手動將所需的檔案複製到 App Dir 中。 \n Pyslvs 的包裝流程是透過 appimage_recipe.sh 腳本完成。使用的工具為 virtualenv，依照開發環境的安裝模式建立 App Dir，並安裝 Pyslvs 所需的模組，並經由手動複製一些 built-in scripts 之後，打造出完全獨立的 Python 執行環境。Pyslvs 便可在完全無 Python 3 的環境中執行（不過仍有 glib 的最低版本需求）。 \n \n App Dir 位置：ENV/ \n 包裝輸出位置：out/ \n \n', 'tags': '', 'url': 'AppImage 包裝.html'}, {'title': 'Mac OS X 開發', 'text': 'Mac OS X 上的任何程式開發都不建議使用 sudo 指令（除非必要），也不要使用內建的 Python 以免系統故障。建議使用  Homebrew  或是  MacPort  套件管理工具。 \n 必須注意的是，平台上的編譯工具僅支援向下相容，較新的 xcode 版本無法在舊版運行。 \n 安裝 Python 與 SWIG： \n # Homebrew 的 Python 版本永遠是最新的穩定板\nbrew install python@3\nbrew install swig\n\n# MacPort 可支援任意 Python 版本\n# 安裝在 /opt 必須使用 sudo 指令\nyes | sudo part install python36\nyes | sudo port install py$PYTHON-pip\nsudo port select --set python3 python36\nsudo port select --set pip pip36 \n 使用 MacPort 的 pip3 安裝時請加上 --user 免去 sudo 操作。 \n 取得 Pyslvs 原始碼： \n git clone --recurse-submodules https://github.com/KmolYuan/Pyslvs-PyQt5 \n 安裝需要的 Python 模組： \n pip3 install -r requirements.txt \n 安裝 PyInstaller 模組打包成執行檔： \n pip3 install pyinstaller \n 完整編譯： \n make \n 可以在倉儲目錄下的 dist 資料夾中取得 app 與 unix-style 可執行檔。 \n 編譯核心： \n # 所有程式庫\nmake build-kernel\n \n# Pyslvs 程式庫\nmake build-pyslvs\n \n# Python-Solvespace 程式庫\nmake build-solvespace \n 執行腳本： \n python3 launch_pyslvs.py \n', 'tags': '', 'url': 'Mac OS X 開發.html'}, {'title': 'PyInstaller 對 Mac OS X 的支援', 'text': '官方說明： https://pyinstaller.readthedocs.io/en/stable/man/pyi-makespec.html#windows-and-mac-os-x-specific-options \n \n 預設包裝時採用關閉主控台的選項（使用 -w），目的是為了產生標準 .app 格式的可執行檔，而非只有類 Unix 執行檔。啟用此選項後，會包裝出上述兩種格式的執行檔。 \n 在 Mac OS X 中，對 .app 格式的可執行檔作網路傳輸時必須微壓縮成 .zip 檔案。 \n 在 Mac OS X 中可以自動定位 SWIG 與 PyQt 等擁有外部程式庫的模組。 \n 在 Mac OS X 中的圖示格式為 icns。 \n \n', 'tags': '', 'url': 'PyInstaller 對 Mac OS X 的支援.html'}, {'title': '參與協同', 'text': '若要參與 Pyslvs 的開發，基本編寫風格遵循  PEP 8 ，主要規則請參閱子章節的資訊。 \n', 'tags': '', 'url': '參與協同.html'}, {'title': '註解規則', 'text': '所有 Modules、Classes 與 Functions 都應該加上 doc string，一般 Methods 應比照 Functions，而 __init__ 等則視情況在程式碼中添加單行註解。 \n # -*- coding: utf-8 -*-\n\n"""Module doc string title\n\nModule decriptions ...\n"""\n\n\ndef function():\n    """Single line doc string."""\n    ...\n\n\nclass MyClass:\n\n    """MyClass doc string."""\n\n    def method():\n        """MyClass.method doc string."""\n        ... \n 使用單行註解多行程式碼時，為求功能明確，應在該區域使用單空行分隔。 \n def foo() -> List[Set[int]]:\n    """foo doc string."""\n    a = 10\n    b = 20\n\n    # Let a plus b, and assign to c.\n    c = a + b\n\n    # Do another things ...\n    d = func_c2d(c)\n    e = func_c2e(c)\n    f = func_de2f(d, e)\n\n    # Convert f.\n    return list(f) \n', 'tags': '', 'url': '註解規則.html'}, {'title': '命名規則', 'text': '\n Classes 使用字首大寫命名，如 RedApple。 \n 定值使用全部大寫並用底線連接，如 RED_APPLE。 \n 模組、變數等其他名稱一律使用小寫並用底線連接，如 red_apple。 \n 自用變數樣式（以表示絕對不會跨層級）：\n \n 模組層級的自用變數使用一個底線起始，如 _red_apple、_RedApple 或 _RED_APPLE。 \n Class 層級的自用變數或 Methods 使用兩個底線起始，如 __red_apple。 \n \n \n 必須複寫原始模組，如 Qt 使用小寫字首 redApple，則遵照原始模組。 \n \n', 'tags': '', 'url': '命名規則.html'}, {'title': '類型註解規則', 'text': '建議對任何 Functions 與 Methods 都加上類型註解（參見  PEP 484 ），必要時在一般名稱也可做註記（回傳值無法推斷時）。 \n if not row > -1:\n    return\n\n# Here is not None!\nitem: MyItem = table.item(row)\nitem.do_something() \n 若是回傳 None 值，可以不加上回傳值的註解。 \n def func(a: bool):\n    if a:\n        return\n    do_my_job() \n 序列的樣式為 Sequence[T]、List[T]、Iterator[T] 等，唯獨 Tuple[T] 為固定長度，應標示 Tuple[T, ...]。 \n def _join_more(iter_obj: Iterable[int]) -> Tuple[int, ...]:\n    """Convert iterable object to tuple."""\n    return tuple(iter_obj) + (1,) \n 若是可能為多種非繼承類型，使用 Union。 \n s: Union[str, Sequence[bytes]] = s_func() \n 若是可能為 None 值，應加上 Optional。 \n def func(*, labels: Optional[Sequence[int]] = None):\n    ... \n Functions 使用 Callable[[In_T1, InT2], Out_T]。 \n def danger(func: Callable[[Any], Any]) -> Callable[[Any], Any]:\n    """My danger decorator."""\n\n    def wrapper_func(*args):\n        """Is danger function."""\n        print("Danger!")\n        return func(*args)\n\n    return wrapper_func\n\n\n@danger\ndef foo():\n    ... \n 造成遞迴引用類型時應改為字串。 \n class MyClass:\n\n    def __add__(self, p: \'MyClass\') -> \'MyClass\':\n        ... \n', 'tags': '', 'url': '類型註解規則.html'}, {'title': 'Kmol-editor', 'text': 'https://github.com/KmolYuan/kmol-editor \xa0是一個輕量的工程用編輯器, 主要用來開發自己 (意即以 kmol-editor 開發 kmol-editor), 以及應用於協同 Markdown 文件編輯, 可結合  Pandoc  與  MikTeX , 將 Markdown 資料轉換為 html 與 pdf 或 epub 格式. \n http://lab.kmol.info \xa0 目前使用可攜  miktex_portable_and_pandoc.7z , 使用者下載後與先前的 Python 可攜系統結合, 在原有的 start.bat 啟動批次檔案中的 path 設定, 加入: \n %Disk%:\\pandoc-2.4-windows-x86_64;%Disk%:\\miktex_portable\\texmfs\\install\\miktex\\bin; \n 重新啟動後, 即可利用 pandoc 指令與 xelatex 將 Markdown 資料轉為 pdf 文件. \n 此外, 若配合\xa0 https://github.com/KmolYuan/kmolbook-paper \xa0倉儲, 用於建立課程專題報告、學位論文或期刊論文等, 則需要額外以下列指令: \n python -m pip install pandoc-fignos pandoc-tablenos pandoc-eqnos \n 安裝\xa0 pandoc-fignos ,  pandoc-tablenos  與  pandoc-eqnos  等模組. \n 過程中, 還必須透過 MikTeX Package Manager 安裝: \n tex\\latex\\catoptions\\catoptions.sty tex\\latex\\fancyhdr\\fancyhdr.sty tex\\latex\\xwatermark\\xwatermark.sty tex\\latex\\ltxkeys\\ltxkeys.sty tex\\latex\\ms\\everyshi.sty tikz.sty tex\\latex\\xcolor\\xcolor.sty \n 等 packages. \n \n', 'tags': '', 'url': 'Kmol-editor.html'}, {'title': '參考', 'text': 'Design of special planar linkages.pdf \n https://designengrlab.github.io/PMKS/ \xa0 \n https://github.com/DesignEngrLab/PMKS \xa0 \n Automated Generation of Linkage Loop Equations for Planar One Degree-of-Freedom Linkages up to 8-Bar.pdf \n Computer Aided Design of Eight-bar Linkages.pdf \n Implementation of an Open Source Planar Linkage Mechanism Simulation and Dimensional Synthesis System.pdf \n 自動拓樸結構合成 \n Automatic Synthesis of Planar Simple Joint Kinematic Chains by Single Kinematic Chain Adding Method \n 機構類型合成 \n TYPE SYNTHESIS OF PLANAR LINKAGE MECHANISMS WITH ROTOIDAL AND PRISMATIC JOINTS \n 網際連桿合成 \n A WEB-BASED OPTIMIZATION FOR FUNCTION SYNTHESIS OF PLANAR LINKAGE \n 機構尺寸合成 \n Dimensional Synthesis of Six-Bar Linkage as a Constrained RPR Chain \n C++ 程式轉為 Python 動態程式庫 \n AutoWIG - automatic generation of python bindings for Cpp libraries.pdf https://github.com/StatisKit/AutoWIG \n 其他 \n 1990: \xa0 Number synthesis of kinematic chains based on permutation groups \n 1995: \xa0 Structural Synthesis of Mechanisms \n 2007: \xa0 A new theory for the topological structure analysis of kinematic chains and its applications \n 2008: \xa0 Computer-aided structure decomposition theory of kinematic chains and its applications \n 2012: \xa0 Synthesis of the whole family of planar 1-DOF kinematic chains and creation of their atlas database \n 2013: \xa0 Automated sketching of non-fractionated kinematic chains \n 2014: \xa0 一般化運動鏈之數目合成 \n 2015: \xa0 On the number synthesis of kinematic chains \n 2015: \xa0 Automatic_Structural_Synthesis_of_Planar_Mechanisms_and_Its_Application_to_Creative_Design.pdf \n 2016: \xa0 Automatic generation of the complete set of planar kinematic chains with up to six independent loops and up to 19 links \n 2017: \xa0 An automatic method for the connectivity calculation in planar closed kinematic chains \n 2018: \xa0 A new atlas for 8-bar kinematic chains with up to 3 prismatic pairs using Joint Sorting Code \n 2018: \xa0 A new method for the automatic sketching of planar kinematic chains \n CAD \n https://freecadweb.org/ \xa0 \n https://www.blender.org/ \xa0 \n https://github.com/tpaviot/oce \xa0 \n https://github.com/LaughlinResearch/pyOCCT \xa0 \n \n \n', 'tags': '', 'url': '參考.html'}, {'title': 'Misc', 'text': 'The Secret and Beauty of Ancient Chinese Padlocks.pdf \n \n \n \n \n \n', 'tags': '', 'url': 'Misc.html'}]};